server.port=8089
server.servlet.context-path=/

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.1.56:3306/qy102?useSSL=false&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=159357
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# springboot2.x和springboot1.x以下的配置不一样
# 当项目启动的时候直接加载sql文件去初始化数据库--->也就是说当项目运行的时候可以直接执行sql文件
# spring.datasource.schema:是为了加载表结构，并不加载表数据(在spring的官方文档指出，这个schema是加载结构用的)
#spring.datasource.schema=classpath:sql/qy_102.sql
# spring.datasource.data=加载数据所使用
# spring.datasource.initialization-mode：加载模式 nerver:代表就算项目正常启动运行也不会加载sql语句 always:代表总是会被加载 embedded:加载内存数据库(redis)
#spring.datasource.initialization-mode=never

mybatis.type-aliases-package=com.aaa.lee.app.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml

spring.application.name=order-interface-provider

eureka.client.service-url.defaultZone=http://eureka01:7081/eureka
eureka.instance.instance-id=order-interface-provider-8089



# 配置通用mapper
# 配置mybatis的自增主键规则，可以不配，因为默认就是MYSQL
mapper.identity=MYSQL
# 配置tk.mybatis的路径(通用mapper的路径)
mapper.mappers=tk.mybatis.mapper.common.Mapper
# 配置insert和update中，是否判断字符串的类型(是否需要自动添加<if>标签)
# <update>
#   update member set <if test="member_name != ''"> member_name = #{memberName} </if>
# </update>
mapper.not-empty=true
# 枚举在通用mapper中是是被不了了，所以必须要让枚举类型转换为简单的类型让通用mapper进行识别(String)
# SUCCESS(202, "操作成功")  private Integer code; private String msg;
mapper.enum-as-simple-type=true

# 配置pagehelper
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true